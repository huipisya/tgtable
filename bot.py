import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import openpyxl
from openpyxl import Workbook
import os
import re
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DATA_DIR = os.getenv('DATA_DIR', 'user_data')
os.makedirs(DATA_DIR, exist_ok=True)

# ID —á–∞—Ç–∞ –¥–ª—è –±—ç–∫–∞–ø–∞
BACKUP_CHAT_ID = os.getenv('BACKUP_CHAT_ID')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è application
app = None

# --- –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ú–ò –§–ê–ô–õ–ê–ú–ò ---
def get_user_excel_file(user_id: int) -> str:
    return os.path.join(DATA_DIR, f'user_{user_id}.xlsx')

def init_user_excel(user_id: int):
    excel_file = get_user_excel_file(user_id)
    
    if not os.path.exists(excel_file):
        from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
        
        wb = Workbook()
        ws = wb.active
        ws.title = "–ü–æ—Å—Ç—ã"
        
        headers = ['‚Ññ', '–°—Å—ã–ª–∫–∞', '–°—Ç–∞—Ç—É—Å', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è']
        ws.append(headers)
        
        header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
        header_font = Font(bold=True, color="FFFFFF", size=12)
        alignment_center = Alignment(horizontal="center", vertical="center")
        
        thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        for cell in ws[1]:
            cell.fill = header_fill
            cell.font = header_font
            cell.alignment = alignment_center
            cell.border = thin_border
        
        ws.column_dimensions['A'].width = 8
        ws.column_dimensions['B'].width = 60
        ws.column_dimensions['C'].width = 20
        ws.column_dimensions['D'].width = 22
        
        wb.save(excel_file)
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

def send_backup_for_user(user_id: int):
    if BACKUP_CHAT_ID:
        excel_file = get_user_excel_file(user_id)
        if os.path.exists(excel_file):
            try:
                import asyncio
                async def _send():
                    try:
                        with open(excel_file, 'rb') as f:
                            await app.bot.send_document(
                                chat_id=BACKUP_CHAT_ID,
                                document=f,
                                filename=f'backup_user_{user_id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
                            )
                        logger.info(f"–ë—ç–∫–∞–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ç–∫–∞–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

                asyncio.create_task(_send())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –±—ç–∫–∞–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        else:
            logger.warning(f"–§–∞–π–ª –¥–ª—è –±—ç–∫–∞–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# --- –û–ë–ù–û–í–õ–Å–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° EXCEL ---
def get_next_number(user_id: int):
    excel_file = get_user_excel_file(user_id)
    if not os.path.exists(excel_file):
        init_user_excel(user_id)
    wb = openpyxl.load_workbook(excel_file)
    ws = wb.active
    return ws.max_row

def add_post_to_excel(user_id: int, link: str, status=None):
    from openpyxl.styles import Alignment, Border, Side
    
    excel_file = get_user_excel_file(user_id)
    if not os.path.exists(excel_file):
        init_user_excel(user_id)

    wb = openpyxl.load_workbook(excel_file)
    ws = wb.active
    row = ws.max_row + 1
    number = row - 1
    
    thin_border = Border(
        left=Side(style='thin'),
        right=Side(style='thin'),
        top=Side(style='thin'),
        bottom=Side(style='thin')
    )
    
    ws[f'A{row}'] = number
    ws[f'A{row}'].alignment = Alignment(horizontal="center", vertical="center")
    ws[f'A{row}'].border = thin_border
    
    ws[f'B{row}'].hyperlink = link
    ws[f'B{row}'].value = link
    ws[f'B{row}'].border = thin_border
    
    ws[f'C{row}'] = status if status else ""
    ws[f'C{row}'].alignment = Alignment(horizontal="center", vertical="center")
    ws[f'C{row}'].border = thin_border
    
    ws[f'D{row}'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ws[f'D{row}'].alignment = Alignment(horizontal="center", vertical="center")
    ws[f'D{row}'].border = thin_border
    
    wb.save(excel_file)
    send_backup_for_user(user_id)
    return number

def delete_post_from_excel(user_id: int, link: str):
    excel_file = get_user_excel_file(user_id)
    if not os.path.exists(excel_file):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False

    wb = openpyxl.load_workbook(excel_file)
    ws = wb.active
    deleted = False
    
    for row in range(2, ws.max_row + 1):
        if ws[f'B{row}'].value == link:
            ws.delete_rows(row)
            for i in range(row, ws.max_row + 1):
                ws[f'A{i}'] = i - 1
            wb.save(excel_file)
            deleted = True
            break
            
    if deleted:
        send_backup_for_user(user_id)
    
    return deleted

def update_post_status(user_id: int, link: str, status: str):
    excel_file = get_user_excel_file(user_id)
    if not os.path.exists(excel_file):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ñ–∞–π–ª–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False

    wb = openpyxl.load_workbook(excel_file)
    ws = wb.active
    
    for row in range(2, ws.max_row + 1):
        if ws[f'B{row}'].value == link:
            ws[f'C{row}'] = status
            wb.save(excel_file)
            return True
    return False

def get_export_button():
    keyboard = [[InlineKeyboardButton("üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data='export_db')]]
    return InlineKeyboardMarkup(keyboard)

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –°–°–´–õ–û–ö ---
def extract_telegram_link(text: str) -> str:
    pattern = r'https?://(?:t\.me|telegram\.me)/(?:[a-zA-Z0-9_]+)(?:/[0-9]+)?(?:/[a-zA-Z0-9_]+)?'
    match = re.search(pattern, text)
    if match:
        return match.group(0)
    return ""

# --- –û–ë–ù–û–í–õ–Å–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user_excel(user_id)
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å:\n"
        "1. *–ü–µ—Ä–µ—Å–ª–∞—Ç—å* –º–Ω–µ –ø–æ—Å—Ç –∏–∑ Telegram (–µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Å—Å—ã–ª–∫—É).\n"
        "2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ *—Å—Å—ã–ª–∫—É* –Ω–∞ –ø–æ—Å—Ç –≤ Telegram.\n"
        "3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å *–º–µ–¥–∏–∞—Ñ–∞–π–ª* —Å –ø–æ–¥–ø–∏—Å—å—é, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π —Å—Å—ã–ª–∫—É.\n\n"
        "–Ø —Å–æ—Ö—Ä–∞–Ω—é –µ—ë –≤ *—Ç–≤–æ—é* –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/export - –≤—ã–≥—Ä—É–∑–∏—Ç—å *—Ç–≤–æ—é* –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Excel\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ *—Ç–≤–æ–∏—Ö* –ø–æ—Å—Ç–æ–≤"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–ª—é–±—ã—Ö, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user_excel(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = update.message.text or update.message.caption or ""
    if text:
        link = extract_telegram_link(text)
        if link:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['current_link'] = link
            await _present_link_options(update, context, link)
            return # –û–±—Ä–∞–±–æ—Ç–∞–ª–∏, –≤—ã—Ö–æ–¥–∏–º

    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    await update.message.reply_text("‚ùå –Ø –Ω–µ –Ω–∞—à—ë–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ Telegram –≤ —Ç–≤–æ—ë–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É, –ø–µ—Ä–µ—à–ª–∏ –ø–æ—Å—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é —Å–æ–¥–µ—Ä–∂–∞—â–µ–π —Å—Å—ã–ª–∫—É.")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ü–∏–π –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
async def _present_link_options(update: Update, context: ContextTypes.DEFAULT_TYPE, link: str):
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç + —Å—Ç–∞—Ç—É—Å", callback_data='add_with_status')],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç", callback_data='delete_post')],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data='add_simple')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üìå –ü–æ—Å—Ç –ø–æ–ª—É—á–µ–Ω!\n\n–°—Å—ã–ª–∫–∞: {link}\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id

    if query.data == 'export_db':
        excel_file = get_user_excel_file(user_id)
        if os.path.exists(excel_file):
            await query.message.reply_document(
                document=open(excel_file, 'rb'),
                filename=f'my_posts_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
            )
        else:
            await query.edit_message_text("‚ùå –¢–≤–æ—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Å—Ç.")
        return
    
    link = context.user_data.get('current_link')
    
    if not link:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
        return
    
    if query.data == 'add_simple':
        number = add_post_to_excel(user_id, link)
        await query.edit_message_text(
            f"‚úÖ –ü–æ—Å—Ç #{number} –¥–æ–±–∞–≤–ª–µ–Ω –≤ *—Ç–≤–æ—é* –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n\n"
            f"–°—Å—ã–ª–∫–∞: {link}",
            reply_markup=get_export_button()
        )
        context.user_data.clear()
        
    elif query.data == 'add_with_status':
        context.user_data['waiting_for_status'] = True
        await query.edit_message_text(
            f"üìù –í–≤–µ–¥–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ—Å—Ç–∞:\n\n{link}\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –û–¥–æ–±—Ä–µ–Ω–æ, –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ, –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏ —Ç.–¥."
        )
        
    elif query.data == 'delete_post':
        success = delete_post_from_excel(user_id, link)
        if success:
            await query.edit_message_text(
                f"üóëÔ∏è –ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω –∏–∑ *—Ç–≤–æ–µ–π* –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!\n\n"
                f"–°—Å—ã–ª–∫–∞: {link}",
                reply_markup=get_export_button()
            )
        else:
            await query.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ —É–∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ.\n\n"
                f"–°—Å—ã–ª–∫–∞: {link}",
                reply_markup=get_export_button()
            )
        context.user_data.clear()

async def export_database(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    excel_file = get_user_excel_file(user_id)
    if os.path.exists(excel_file):
        await update.message.reply_document(
            document=open(excel_file, 'rb'),
            filename=f'my_posts_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
        )
    else:
        await update.message.reply_text("‚ùå –¢–≤–æ—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Å—Ç.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    excel_file = get_user_excel_file(user_id)
    if not os.path.exists(excel_file):
        await update.message.reply_text("üìä –¢–≤–æ—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
        return
    
    wb = openpyxl.load_workbook(excel_file)
    ws = wb.active
    total = ws.max_row - 1
    
    statuses = {}
    for row in range(2, ws.max_row + 1):
        status = ws[f'C{row}'].value
        if status:
            statuses[status] = statuses.get(status, 0) + 1
    
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ *—Ç–≤–æ–∏—Ö* –ø–æ—Å—Ç–æ–≤:\n\n"
    message += f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total}\n\n"
    
    if statuses:
        message += "–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
        for status, count in statuses.items():
            message += f"‚Ä¢ {status}: {count}\n"
    
    await update.message.reply_text(message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    global app

    TOKEN = os.getenv("BOT_TOKEN")
    
    if not TOKEN:
        logger.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return

    app = Application.builder().token(TOKEN).job_queue(None).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("export", export_database))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(button_handler))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥
    app.add_handler(MessageHandler(~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å—Å—ã–ª–∫—É)!")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()