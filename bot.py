import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import openpyxl
from openpyxl import Workbook
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º—è —Ñ–∞–π–ª–∞ Excel
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—É—Ç–∏ –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É
DATA_DIR = os.getenv('DATA_DIR', '.')
EXCEL_FILE = os.path.join(DATA_DIR, 'posts_database.xlsx')

# ID —á–∞—Ç–∞ –¥–ª—è –±—ç–∫–∞–ø–∞
BACKUP_CHAT_ID = os.getenv('BACKUP_CHAT_ID')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è application
app = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞
def init_excel():
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(DATA_DIR, exist_ok=True)
    
    if not os.path.exists(EXCEL_FILE):
        from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
        
        wb = Workbook()
        ws = wb.active
        ws.title = "–ü–æ—Å—Ç—ã"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ['‚Ññ', '–°—Å—ã–ª–∫–∞', '–°—Ç–∞—Ç—É—Å', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è']
        ws.append(headers)
        
        # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
        header_font = Font(bold=True, color="FFFFFF", size=12)
        alignment_center = Alignment(horizontal="center", vertical="center")
        
        thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        for cell in ws[1]:
            cell.fill = header_fill
            cell.font = header_font
            cell.alignment = alignment_center
            cell.border = thin_border
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        ws.column_dimensions['A'].width = 8   # ‚Ññ
        ws.column_dimensions['B'].width = 60  # –°—Å—ã–ª–∫–∞
        ws.column_dimensions['C'].width = 20  # –°—Ç–∞—Ç—É—Å
        ws.column_dimensions['D'].width = 22  # –î–∞—Ç–∞
        
        wb.save(EXCEL_FILE)
        logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª")

# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ç–∫–∞–ø –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
async def send_backup():
    if BACKUP_CHAT_ID and os.path.exists(EXCEL_FILE):
        try:
            with open(EXCEL_FILE, 'rb') as f:
                await app.bot.send_document(
                    chat_id=BACKUP_CHAT_ID,
                    document=f,
                    filename=f'backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
                )
            logger.info("–ë—ç–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ç–∫–∞–ø–∞: {e}")

# –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ—Å—Ç–∞
def get_next_number():
    wb = openpyxl.load_workbook(EXCEL_FILE)
    ws = wb.active
    return ws.max_row  # –í–µ—Ä–Ω—ë—Ç –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏

# –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ Excel
def add_post_to_excel(link, status=None):
    from openpyxl.styles import Alignment, Border, Side
    
    wb = openpyxl.load_workbook(EXCEL_FILE)
    ws = wb.active
    row = ws.max_row + 1
    number = row - 1  # –ú–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
    
    thin_border = Border(
        left=Side(style='thin'),
        right=Side(style='thin'),
        top=Side(style='thin'),
        bottom=Side(style='thin')
    )
    
    ws[f'A{row}'] = number
    ws[f'A{row}'].alignment = Alignment(horizontal="center", vertical="center")
    ws[f'A{row}'].border = thin_border
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É
    ws[f'B{row}'].hyperlink = link
    ws[f'B{row}'].value = link
    ws[f'B{row}'].style = "Hyperlink"
    ws[f'B{row}'].border = thin_border
    
    ws[f'C{row}'] = status if status else ""
    ws[f'C{row}'].alignment = Alignment(horizontal="center", vertical="center")
    ws[f'C{row}'].border = thin_border
    
    ws[f'D{row}'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ws[f'D{row}'].alignment = Alignment(horizontal="center", vertical="center")
    ws[f'D{row}'].border = thin_border
    
    wb.save(EXCEL_FILE)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ç–∫–∞–ø –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    import asyncio
    asyncio.create_task(send_backup())
    
    return number

# –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –∏–∑ Excel –ø–æ —Å—Å—ã–ª–∫–µ
def delete_post_from_excel(link):
    wb = openpyxl.load_workbook(EXCEL_FILE)
    ws = wb.active
    
    for row in range(2, ws.max_row + 1):
        if ws[f'B{row}'].value == link:
            ws.delete_rows(row)
            # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            for i in range(row, ws.max_row + 1):
                ws[f'A{i}'] = i - 1
            wb.save(EXCEL_FILE)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ç–∫–∞–ø –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            import asyncio
            asyncio.create_task(send_backup())
            
            return True
    return False

# –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
def update_post_status(link, status):
    wb = openpyxl.load_workbook(EXCEL_FILE)
    ws = wb.active
    
    for row in range(2, ws.max_row + 1):
        if ws[f'B{row}'].value == link:
            ws[f'C{row}'] = status
            wb.save(EXCEL_FILE)
            return True
    return False

# –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_export_button():
    keyboard = [[InlineKeyboardButton("üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data='export_db')]]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ—ë –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/export - –≤—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Excel\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫
async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    link = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['current_link'] = link
    
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç + —Å—Ç–∞—Ç—É—Å", callback_data='add_with_status')],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç", callback_data='delete_post')],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data='add_simple')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üìå –ü–æ—Å—Ç –ø–æ–ª—É—á–µ–Ω!\n\n–°—Å—ã–ª–∫–∞: {link}\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if query.data == 'export_db':
        if os.path.exists(EXCEL_FILE):
            await query.message.reply_document(
                document=open(EXCEL_FILE, 'rb'),
                filename=f'posts_export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
            )
        else:
            await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Å—Ç.")
        return
    
    link = context.user_data.get('current_link')
    
    if not link:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
        return
    
    if query.data == 'add_simple':
        # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞
        number = add_post_to_excel(link)
        await query.edit_message_text(
            f"‚úÖ –ü–æ—Å—Ç #{number} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n\n"
            f"–°—Å—ã–ª–∫–∞: {link}",
            reply_markup=get_export_button()
        )
        context.user_data.clear()
        
    elif query.data == 'add_with_status':
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å
        context.user_data['waiting_for_status'] = True
        await query.edit_message_text(
            f"üìù –í–≤–µ–¥–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ—Å—Ç–∞:\n\n{link}\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –û–¥–æ–±—Ä–µ–Ω–æ, –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ, –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏ —Ç.–¥."
        )
        
    elif query.data == 'delete_post':
        # –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
        delete_post_from_excel(link)
        await query.edit_message_text(
            f"üóëÔ∏è –ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!\n\n"
            f"–°—Å—ã–ª–∫–∞: {link}",
            reply_markup=get_export_button()
        )
        context.user_data.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å—Ç–∞—Ç—É—Å–∞)
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('waiting_for_status'):
        status = update.message.text
        link = context.user_data.get('current_link')
        
        if link:
            number = add_post_to_excel(link, status)
            await update.message.reply_text(
                f"‚úÖ –ü–æ—Å—Ç #{number} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n\n"
                f"–°—Å—ã–ª–∫–∞: {link}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}",
                reply_markup=get_export_button()
            )
            context.user_data.clear()
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Å—ã–ª–∫—É
        await handle_link(update, context)

# –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def export_database(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if os.path.exists(EXCEL_FILE):
        await update.message.reply_document(
            document=open(EXCEL_FILE, 'rb'),
            filename=f'posts_export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
        )
    else:
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Å—Ç.")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not os.path.exists(EXCEL_FILE):
        await update.message.reply_text("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
        return
    
    wb = openpyxl.load_workbook(EXCEL_FILE)
    ws = wb.active
    total = ws.max_row - 1  # –ú–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
    
    # –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
    statuses = {}
    for row in range(2, ws.max_row + 1):
        status = ws[f'C{row}'].value
        if status:
            statuses[status] = statuses.get(status, 0) + 1
    
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"
    message += f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total}\n\n"
    
    if statuses:
        message += "–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
        for status, count in statuses.items():
            message += f"‚Ä¢ {status}: {count}\n"
    
    await update.message.reply_text(message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    global app
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Excel
    init_excel()
    
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    TOKEN = os.getenv("BOT_TOKEN")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–µ–∑ job_queue  —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏)
    app = Application.builder().token(TOKEN).job_queue(None).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("export", export_database))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()